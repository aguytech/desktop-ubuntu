#!/bin/bash
#
# write by Aguy

_echoT "\n==========================================  ${_PART}"

########################  DATA

_echoA "btrfs configuration part 2"
_askyn "This part have to be launched AFTER installation and AFTER reboot\nConfirm"
[ "${_ANSWER}" = n ] && exit

_echot "------------------ Data"

if [ -z ${_LXD+x} ]; then
	_askyn "Configure computer for lxd ? "
	_LXD=${_ANSWER/n/}
fi
_confset _LXD "${_LXD}"

if [ -z ${_SSD+x} ]; then
	_askyn "The device '${_DEVICE_SYS}' named '${_SYSNAME}' are they a ssd disk ? "
	_SSD=${_ANSWER/n/}
fi
_confset _SSD "${_SSD}"

if [ -z ${_MEM+x} ]; then
	anstmp=2G
	_askno "Give the TMPFS memory size for /tmp or 0 (${anstmp})"
	_MEM=${_ANSWER:-${anstmp}}
	_MEM=${_MEM%%0*}
fi
_confset _MEM "${_MEM}"

########################  EXT

_echot "------------------ mount ${_DEVICE_SYS}"
sudo mount ${_DEVICE_SYS} /mnt || _exite "Unable to mount ${_DEVICE_SYS} in /mnt"
cd /mnt

#mv ${_SYSNAME}/var/log ${_SYSNAME}/var/log.keep
_echO "btrfs subvolume list"
_echo "$(sudo btrfs subvolume list .)"

_echot "------------------ btrfs create save"
[ -d save ] || sudo btrfs subvolume create save
[ -d /save ] || sudo mkdir /save

_echot "------------------ create /ext"
if [ "${_DEVICE_EXT}" ]; then
	device_ext=${_DEVICE_EXT}
	sub_ext=
else
	device_ext=${_DEVICE_SYS}
	sub_ext=/ext
	sudo btrfs subvolume create ext
fi
[ -d /ext ] || sudo mkdir /ext

########################  LXD

if [ "${_LXD}" ]; then
	_echot "------------------ btrfs lxd"
	path_lxd=/vm

	[ -d "${path_lxd}" ] || sudo mkdir ${path_lxd}
	[ -d "lxd-${_SYSNAME}" ] && ! [ -d "lxd-${_SYSNAME}.keep" ] && sudo mv "lxd-${_SYSNAME}" "lxd-${_SYSNAME}.keep"
	[ -d "lxd-${_SYSNAME}" ] || sudo btrfs subvolume create lxd-${_SYSNAME}
fi

_echO "btrfs subvolume list ${PWD}"
_echo "$( sudo btrfs subvolume list . )"

_echot "------------------ umount ${_DEVICE_SYS}"
cd /
sudo umount /mnt

########################  /ext

_echot "------------------ mount ${device_ext}"
sudo mount ${device_ext} /mnt || _exite "Unable to mount ${device_ext} in /mnt"

_echot "------------------ rights ${device_ext}"
sudo chown ${USER}:${USER} -R /mnt${sub_ext}

_echot "------------------ umount ${device_ext}"
sudo umount /mnt

########################  fstab

_echot "------------------ device sys"
uuidsys=$( sudo blkid |grep ${_DEVICE_SYS} |sed 's|.* UUID="\([^"]\+\)" .*|\1|' )
if [ -z "${uuidsys}" ]; then
	_ask "Please give the UUID for sys"
	uuidsys=${_ANSWER}
	_echO "uuidsys=${uuidsys}"
fi

if [ "${_DEVICE_EXT}" ]; then
	_echot "------------------ device ext"
	uuidext=$( sudo blkid |grep ${_DEVICE_EXT} |sed 's|.* UUID="\([^"]\+\)" .*|\1|' )
	if [ -z "${uuidext}" ]; then
		_ask "Please give the UUID for ext"
		uuidext=${_ANSWER}
		_echO "uuidext=${uuidext}"
	fi
fi

_echot "------------------ /etc/fstab"
file=/etc/fstab
_keepcp ${file}
sudo sed -i '/^UUID=.* btrfs .*/ s|^|#|' ${file}

sudo sh -c "echo '
# btrfs sys
UUID=${uuidsys}   /                 btrfs   defaults,noatime,space_cache=v2,autodefrag,compress=zstd,subvol=/${_SYSNAME}      0    1
UUID=${uuidsys}   /home             btrfs   defaults,noatime,space_cache=v2,autodefrag,compress=zstd,subvol=/home       0    2
UUID=${uuidsys}   /home/${_USERNAME}      btrfs   defaults,noatime,space_cache=v2,autodefrag,compress=zstd,subvol=/user-${_SYSNAME} 0    2
UUID=${uuidsys}   /save             btrfs   defaults,noatime,space_cache=v2,autodefrag,compress=zstd,subvol=/save       0    2' >> ${file}"
[ "${_LXD}" ] && sudo sh -c "echo 'UUID=${uuidsys}   ${path_lxd}               btrfs   defaults,noatime,space_cache=v2,autodefrag,compress=zstd,subvol=/lxd-${_SYSNAME}      0    2' >> ${file}"

[ "${_DEVICE_EXT}" ] || sudo sh -c "echo 'UUID=${uuidsys}   /ext              btrfs   defaults,noatime,space_cache=v2,autodefrag,compress=zstd,subvol=/ext        0    2' >> ${file}"
sudo sh -c "echo '
UUID=${uuidsys}   /btrfs/sys        btrfs   defaults,noauto,noatime,space_cache=v2,autodefrag,compress=zstd            0    2' >> ${file}"

[ "${_SSD}" ] && sudo sed -i '/btrfs/ s|noatime,|noatime,ssd,|' ${file}

if [ "${_MEM}" ]; then
	if grep -q '^tmp.*\/tmp' /etc/fstab; then
		sudo sed -i "/tmpfs/ s|mode=1777|mode=1777,size=${_MEM}|" ${file}
	else
		sudo sh -c "echo '
tmpfs                                       /tmp              tmpfs   defaults,noatime,mode=1777,size=${_MEM}     0 0' >> ${file}"
	fi
fi

[ "${_DEVICE_EXT}" ] && sudo sh -c "echo '
# btrfs ext
UUID=${uuidext}      /ext              btrfs   defaults,noatime,space_cache=v2,autodefrag,compress=zstd           0    2
UUID=${uuidext}      /btrfs/ext        btrfs   defaults,noauto,noatime,space_cache=v2,autodefrag,compress=zstd               0    2' >> ${file}"

_echO "/etc/fstab"
cat "${file}"
echo

_echot "------------------ mount"
sudo mount /ext || _exite "Unable to mount /ext"
sudo mount /save || _exite "Unable to mount /save"

_echot "------------------ grub"

file=/etc/default/grub
grep -q '^GRUB_CMDLINE_LINUX=.*biosdevname' ${file} || sudo sed -i '/^GRUB_CMDLINE_LINUX=/ s|"$| biosdevname=0"|' ${file}
sudo update-grub

#mount -a

########################  END

_echoT "===================== ${_PART} end"
_partadd "${_PART}" "${_FILE_DONE}"

_echot "------------------ reboot"
_echoA "You have to start the global installation script after the reboot"
_echoa "The computer now will reboot"
_askno "Valid to continue"
reboot
exit
