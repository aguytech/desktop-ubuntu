#!/bin/bash
#
# write by Aguy

_echoT "\n==========================================  ${_PART}"

########################  DATA

_echoA "btrfs configuration part 1"
_askyn "This part have to be launched AFTER installation and BEFORE reboot\nConfirm"
[ "${_ANSWER}" = n ] && exit

_echot "------------------ Devices"
sudo lsblk -e 11,7 -o name,size,mountpoint
echo
sudo blkid|grep -v /loop
echo

if [ -z ${_UEFI+x} ]; then
	_menu "Select a device for system installation" none $( sudo blkid | grep -i 'TYPE="vfat"' | cut -d':' -f1 | sort | xargs )
	_UEFI=${_ANSWER/none/}
	_confset _UEFI "${_UEFI}"
fi

if [ -z ${_DEVICE_SYS+x} ]; then
	_menu "Select a device for system installation" $( sudo blkid -o device|grep -v '/loop\|/sr' | sort| xargs )
	_DEVICE_SYS=${_ANSWER}
	_confset _DEVICE_SYS "${_DEVICE_SYS}"
fi

if [ -z ${_DEVICE_EXT+x} ]; then
	anstmp=
	_askno "Give a device for 'extend' device if exists (${anstmp})"
	_DEVICE_EXT=${_ANSWER:-${anstmp}}
	_confset _DEVICE_EXT "${_DEVICE_EXT}"
fi

if [ -z ${_DEVICE_GRUB+x} ]; then
	anstmp=
	_askno "Give a device for grub installation": "$( sudo blkid -o device|grep -v '/loop\|/sr' | sed 's|[0-9]$||' | sort -u | xargs ) (${anstmp})"
	_DEVICE_GRUB=${_ANSWER:-${anstmp}}
	_confset _DEVICE_GRUB "${_DEVICE_GRUB}"
fi

if [ -z ${_SYSNAME+x} ]; then
	anstmp=$( sed -n 's|^DISTRIB_CODENAME=\(.*\)$|\1|p' /etc/lsb-release | sed 's/.*/\L&/g' )
	_askno "Give a prefix/sufix btrfs volume name for system device '${_DEVICE_SYS}' (${anstmp})"
	_SYSNAME=${_ANSWER:-${anstmp}}
	_confset _SYSNAME "${_SYSNAME}"
fi

if [ -z ${_USERNAME+x} ]; then
	anstmp="nikita"
	_askno "Select a user name (${anstmp})"
	_USERNAME=${_ANSWER:-${anstmp}}
	_confset _USERNAME "${_USERNAME}"
fi

_echot "--------------------------"

cat "${_FILE_CONF}"
_echot "--------------------------"
_askyn "Confirm installation" && [ "${_ANSWER}" == n ] && exit 1

########################  DEVICES

_echot "------------------ btrfs volumes && dirs"

sudo mount "${_DEVICE_SYS}" /mnt || _exite "Unable to mount ${_DEVICE_SYS} in /mnt"
cd /mnt
sudo btrfs subvolume list .

# user
user_uid=$( grep ^${_USERNAME} '@/etc/passwd' | cut -d: -f3 )
user_gid=$( grep ^${_USERNAME} '@/etc/group' | cut -d: -f3 )

# mv system
[ -d "${_SYSNAME}" ] && ! [ -d "${_SYSNAME}.keep" ] && sudo mv "${_SYSNAME}" "${_SYSNAME}.keep"
[ -d "${_SYSNAME}" ] && sudo btrfs subvolume delete "${_SYSNAME}"
sudo mv '@' "${_SYSNAME}" || _exite "Unable to move @ to ${_SYSNAME}"

# create home
! [ -d home ] && sudo btrfs subvolume create home
# backup & create volume for user-$user
[ -d "user-${_SYSNAME}" ] && ! [ -d user-${_SYSNAME}.keep ] && sudo mv user-${_SYSNAME} user-${_SYSNAME}.keep
[ -d "user-${_SYSNAME}" ] && sudo btrfs subvolume delete "user-${_SYSNAME}"
sudo btrfs subvolume create user-${_SYSNAME}
# move data user to user-$user
sudo sh -c "mv @home/${_USERNAME}/* user-${_SYSNAME}/ 2>/dev/null"
sudo sh -c "mv @home/${_USERNAME}/.??* user-${_SYSNAME}/ 2>/dev/null"
# create path for binding user-${user}
[ -d "home/${_USERNAME}" ] || sudo mkdir home/${_USERNAME}
sudo chown ${user_uid}:${user_gid} -R home/${_USERNAME} user-${_SYSNAME}

_echot "------------------ btrfs & path delete"

for sub in @home @cache @log; do
	[ "$( sudo btrfs subvolume show ${sub} 2>/dev/null )" ] && sudo btrfs subvolume delete ${sub}
done

paths="create ubiquity-apt-clone var"
for path in ${paths}; do
	[ -e "${path}" ] && sudo rm -fR "${path}"
done

_echot "------------------ btrfs subvolume list ${PWD}"

sudo btrfs subvolume list .

# fstab
file="${_SYSNAME}/etc/fstab"
[ -f ${file} ] && ! [ -f ${file}.keep ] && sudo cp -a ${file} ${file}.keep
sudo sed -i "/\/ / s|/\?@|/${_SYSNAME}|" ${file}
sudo sed -i "/\/home / s|/\?@home|/home|" ${file}
line=$( sed -n "/UUID.*\/home /p" ${file}|sed "s|/home       |/home/${_USERNAME}|"|sed "s|subvol=/\?home|subvol=/user-${_SYSNAME}|" )
sudo sed -i "/UUID.*\/home / a${line}" ${file}

sudo sed -i "\|/var/cache |d" ${file}
sudo sed -i "\|/var/log |d" ${file}

# bs
path=${_SYSNAME}${_PATH_BS}
_keepmv "${path}"
[ -d "${path}" ] || sudo mkdir -p "${path}"
if [ -d "home/shared/repo/bs" ]; then
	sudo sh -c "echo '
# bind
/home/shared/repo/bs   ${_PATH_BS}    none    bind                    0    0' >> ${file}"
else
	sudo cp -r ${_PATH_BASE}/bs/* ${path}
fi

_echot "------------------ ${file}"
echo
cat ${file}
echo
_echoA "Check above file: /etc/fstab"
_askno "Confirm to continue"
[ "${_ANSWER}" = n ] && exit 1

_echot "------------------ umount /mnt"
cd
sudo umount /mnt

############  GRUB

_echot "------------------ chroot && prepare grub"

# grub
_echot "------------------ mount devices"
cd /
sudo mount -o subvol="${_SYSNAME}" "${_DEVICE_SYS}" /mnt \
	|| _exite "Unable to mount subvol=${_SYSNAME} of ${_DEVICE_SYS} in /mnt"
for i in dev dev/pts sys proc run; do
	sudo mount --bind /$i mnt/$i
done

# uefi
[ "${_UEFI}" ] && sudo mount "${_UEFI}" /mnt/boot/efi

_echot "------------------ Grub install"
_echoA "after you are 'chrooted' please enter this line :"
_echoa "grub-install --recheck ${_DEVICE_GRUB}"
_echoa "update-grub"
_echoa "exit"

sudo chroot mnt

# uefi
[ "$_UEFI" ] && sudo umount mnt/boot/efi

_echot "------------------ umount devices"
for i in run proc sys dev/pts dev; do
	sudo umount mnt/$i
done

sudo umount /mnt

########################  END

_echoT "===================== ${_PART} end"
_partadd "${_PART}" "${_FILE_DONE}"

########################  EXPORT

_echot "------------------ mount ${_DEVICE_SYS}"
sudo mount "${_DEVICE_SYS}" /mnt || _exite "Unable to mount ${_DEVICE_SYS} in /mnt"

_echot "------------------ copy desktop-install config"
path="/mnt/user-${_SYSNAME}/${_PATH_CONF#/home/*/}"
_keepmv ${path}
[ -d "${path}" ] || sudo mkdir -p ${path}
sudo cp -r ${_PATH_CONF}/* ${path}/
sudo chown ${user_uid}:${user_gid} -R /mnt/user-${_SYSNAME}

_echot "------------------ copy desktop-install log"
path="/mnt/${_SYSNAME}/var/log/desktop-install"
_keepmv ${path}
[ -d "${path}" ] || sudo mkdir -p ${path}
sudo cp -a /var/log/desktop-install/* ${path}/
sudo chown ${user_uid}:0 -R ${path}
sudo chmod 664 ${path}/*

_echot "------------------ umount ${_DEVICE_SYS}"
sudo umount /mnt

_echot "------------------ reboot ${_DEVICE_SYS}"
_echoA "You have to start the global installation script after the reboot"
_echoa "The computer now will reboot"
_askno "Valid to continue"
reboot
exit
